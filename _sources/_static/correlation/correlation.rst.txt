===========================
Correlation
===========================

.. warning::
    Article under construction

Correlation (or cross-correlation) is one of the main tools in DSP. Mathematically speaking, 
the (discrete) correlation between two signals :math:`x` and :math:`h` is given by:

.. math::

    x_{corr}[n] = \sum_{m=-\infty}^{m=+\infty} x[m] h[m-n]

where :math:`n` represents a time delay. It looks very similar to convolution,
but it's ultimately not the same thing. What correlation between two signals does
is essentially 'measuring' how much the signals are similar to each other. The more 
similarities, the higher the correlation output. This is very
useful for a number of things, and I will show a few pratical examples below.

Matched filtering
===========================

Matched fitering is the process of correlating an unknown signal with a reference
waveform. The reference waveform should be chosen to match a typical pattern or pulse shape 
that we are expecting in the incoming signal. It acts as the optimal linear filter which 
allows maximizing the SNR in presence of AWGN noise.

|br|

Let's take the most simple example: if we consider a simple binary stream of data,
the reference waveform would be a pulse of width equal to a single bit.
This waveform is the famous rectangular function, defined by:

.. math::

    p(t) = rect(t) = \Pi(t) = \Biggl\lbrace
    ^{{\displaystyle 1 \text{, if } \biggl\lvert\frac{t-t_{0}}{T}\biggl\rvert < \frac{1}{2}}}
    _{\displaystyle{0 \text{, elsewhere }}}

with :math:`t_{0}` the center position of the pulse (i.e. its delay) and :math:`T` the pulse width.
The autocorrelation of this function is a triangular pulse:

.. _figRect:
.. figure:: rectCorr.svg
    :align: center
    :scale: 100%

    Rectangular function and its autocorrelation

Now let's try with a real OOK-modulated signal recorded with the RTL-SDR to illustrate:

.. note::
    The full python code for this example is available
    :download:`here <../Scripts/keyfob_iq_ook.zip>`

|br|

.. _figOOKmatched:
.. figure:: ookCorr.svg
    :align: center
    :scale: 100%

    Matched filtering an OOK signal

**Top graph**: we plot the signal enveloppe (in blue). We can easily distinguish the bit stream
visually although it is quite noisy. If we decided to slice the signal using 0.5 (amplitude level) 
as the 
decision threshold, it wouldn't work: there is too much noise, we would end up with 
a lot of glitches. So we define a reference pulse equivalent to one bit (in green), 
and we correlate it with the recorded signal.
The output is visible as the orange trace: we can see the expected triangular shape,
and also that the filter has gotten rid of most of the noise. On top of that,
the peaks of the triangles are located at the middle of a bit, which will be very useful
for time synchronisation.

**Middle graph**: To show the power of matched filtering, we drown the signal in noise
to the point where it's barely recognisable.

**Bottom graph**: we show the correlation output (in orange) between the noisy signal of the middle
graph and the reference pulse. It's compared to the correlation output of the 
top graph (in blue). We can see that despite the insanely high amount of noise,
the correlation obtained from the noisy signal is nearly identical to the one obtained
from the fairly clean signal shown in the top graph. The output is clean enough that it
should be easy to recover the data.

Sync Word detection
====================

In simple protocols used in embedded systems, radio frames are often built this way:

|br|

+------------------------------------------------------------------+-----------------------------------+-------------+-------------+-----------------------+
| **Preamble** (usually '101010...' type sequence, few bytes long) | **Sync Word** (Usually 2-4 bytes) | **Header**  | **Payload** | **CRC** (often CRC16) |
+------------------------------------------------------------------+-----------------------------------+-------------+-------------+-----------------------+

The preamble gives time to the receiver to adjust its mechanisms of 
Gain Control (AGC), Frequency Error Correction (FEC), etc. and also allows it to synchronize
its clock on the incoming signal. The problem is that the receiver can't know based on the preamble
alone when the 'useful' message actually starts.

|br|

That's where the synchronisation word come in: it's a specific binary sequence which marks
the beginning of the radio frame. So once the receiver has identified a preamble and locked onto it,
it will begin looking for the sync word so it knows where it needs to start decoding the message.




.. |br| raw:: html

   <br />
